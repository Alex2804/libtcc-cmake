
if(__libtcc_compile_definitions)
    return()
endif()
set(__libtcc_compile_definitions INCLUDED)

function(libtcc_compile_definitions __TARGET_ARCHITECTURE__ __LIBTCC_COMPILE_DEFINITIONS__ __STATUS_MESSAGE__)
    if(${${__TARGET_ARCHITECTURE__}} STREQUAL ARM)
        include(cmake/detect_arm_features.cmake)
        detect_arm_features(TRUE)
    endif()

    if(DEFINED ${__LIBTCC_COMPILE_DEFINITIONS__})
        list(APPEND __COMPILE_DEFINITIONS__ "${${__LIBTCC_COMPILE_DEFINITIONS__}}")
    endif()

    if(NOT DEFINED LIBTCC1_NAME)
        set(LIBTCC1_NAME "libtcc1-${LIBTCC_SUFFIX}.a")
    endif()
    list(APPEND __COMPILE_DEFINITIONS__ TCC_LIBTCC1="${LIBTCC1_NAME}")
    list(APPEND __COMPILE_DEFINITIONS__ TCC_TARGET_${${__TARGET_ARCHITECTURE__}})

    if(LIBTCC_ONE_SOURCE)
        list(APPEND __COMPILE_DEFINITIONS__ ONE_SOURCE=1)
    else()
        list(APPEND __COMPILE_DEFINITIONS__ ONE_SOURCE=0)
    endif()

    if(WIN32)
        list(APPEND __COMPILE_DEFINITIONS__ "TCC_TARGET_PE")
        if("${LIBTCC_BUILD_TYPE}" STREQUAL "SHARED")
            list(APPEND __COMPILE_DEFINITIONS__ "LIBTCC_AS_DLL")
        endif()
    elseif(APPLE)
        if(NOT ${${__TARGET_ARCHITECTURE__}} STREQUAL X86_64)
            message(FATAL_ERROR "Libtcc only supports x86_64 on macOS!")
        endif()
        list(APPEND __COMPILE_DEFINITIONS__ TCC_TARGET_MACHO)
    elseif(UNIX AND NOT ANDROID)
        string(TOLOWER ${CMAKE_SYSTEM_NAME} LIBTCC_CONFIG_TRIPLET_SYSTEM_NAME)
        if(${IS_EABI})
            if(${HAS_HARDFLOAT})
                set(LIBTCC_CONFIG_TRIPLET_ABI gnueabihf)
            else()
                set(LIBTCC_CONFIG_TRIPLET_ABI gnueabi)
            endif()
        else()
            set(LIBTCC_CONFIG_TRIPLET_ABI gnu)
        endif()
        set(LIBTCC_CONFIG_TRIPLET "\"${LIBTCC_SUFFIX}-${LIBTCC_CONFIG_TRIPLET_SYSTEM_NAME}-${LIBTCC_CONFIG_TRIPLET_ABI}\"")
        list(APPEND __COMPILE_DEFINITIONS__ "CONFIG_TRIPLET=${LIBTCC_CONFIG_TRIPLET}")
    endif()

    if(${IS_EABI})
        list(APPEND __COMPILE_DEFINITIONS__ TCC_ARM_EABI)
    endif()
    if(${HAS_VFP})
        list(APPEND __COMPILE_DEFINITIONS__ TCC_ARM_VFP)
    endif()
    if(${HAS_HARDFLOAT})
        list(APPEND __COMPILE_DEFINITIONS__ TCC_ARM_HARDFLOAT)
    endif()

    if(LIBTCC_ENABLE_EXTENSION)
        include(extension/cmake/libtcc_extension_compile_definitions.cmake)
        libtcc_extension_compile_definitions(__COMPILE_DEFINITIONS__)
    endif()

    if(${__STATUS_MESSAGE__})
        message(STATUS "Libtcc compile definitions: ${__COMPILE_DEFINITIONS__}")
    endif()
    set(${__LIBTCC_COMPILE_DEFINITIONS__} "${__COMPILE_DEFINITIONS__}" PARENT_SCOPE)
endfunction()